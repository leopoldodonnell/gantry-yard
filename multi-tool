#!/bin/bash
#
# multi-tool - Run the multi-tool container with appropriate volume mounts
#
# Usage: multi-tool [-c workdir] [-d] [tool tool_args]
#
#   -c : run multi-tool from within another docker container and use its volume mounts using
#        the workdir argument as the working directory for the multi-tool container
#   -d : debug mode. Drop into the container using bash as an interactive entry point
#   -m : use the minikube docker enviroment to simplify local work
#
# Available environment override variables:
#
# MULTI_TOOL_TAG = specifies the tag to use for multi-tool
# (AZURE,AWS,GOOGLE,KUBE,HELM)_CONFIG specify the respective config directories
#

MULTI_TOOL_TAG=${MULTI_TOOL_TAG:-v0.6.0}
DOCKER_IMAGE="multi-tool:$MULTI_TOOL_TAG"

# Update this if you're using a private docker registry
REGISTRY="quay.io/leopoldodonnell/"

# Provide defaults with environment variable overrides for config directories
AZURE_CONFIG=${AZURE_CONFIG:-$HOME/.azure}
AWS_CONFIG=${AWS_CONFIG:-$HOME/.aws}
GOOGLE_CONFIG=${GOOGLE_CONFIG:-$HOME/.config}
KUBE_CONFIG=${KUBE_CONFIG:-$HOME/.kube}
MINIKUBE_CONFIG=${MINIKUBE_CONFIG:-$HOME/.minikube}
HELM_CONFIG=${HELM_CONFIG:-$HOME/.helm}
SSH_CONFIG=${SSH_CONFIG:-$HOME/.ssh}
DOCKER_CONFIG=${DOCKER_CONFIG:-$HOME/.docker}

VOLUMES="-v $AWS_CONFIG:/mthome/.aws \
        -v $GOOGLE_CONFIG:/mthome/.config \
        -e AZURE_CONFIG=$AZURE_CONFIG \
        -v $AZURE_CONFIG:/mthome/.azure \
        -v ${PWD}:/share \
        -v $KUBE_CONFIG:/mthome/.kube \
        -v $MINIKUBE_CONFIG:$HOME/.minikube \
        -v $HELM_CONFIG:/mthome/.helm \
        -v $SSH_CONFIG:/mthome/.ssh \
        -v $DOCKER_CONFIG:/mthome/.docker \
        -v /var/run/docker.sock:/var/run/docker.sock"

opt_count=0

while getopts "dmtTc:" opt ; do
  case "${opt}" in
    c) # Run multi-tool from within another container
      opt_count=$((opt_count + 2))
      MY_CONTAINER_ID=`cat /proc/self/cgroup |awk -F '/' '$2 = "docker" && NR == 1 {print $NF }'`
      VOLUMES="--volumes-from ${MY_CONTAINER_ID} -w ${OPTARG}"
      ;;
    d) # Drop into a shell inside the multi-tool container
      opt_count=$((opt_count + 1))
      DEBUG="-ti --entrypoint /bin/bash"
      ;;
    m) # Use the minikube environment
      opt_count=$((opt_count + 1))
      eval $(minikube docker-env)
      read -r -d '' MINIKUBE_ENV <<EOF
        -e DOCKER_TLS_VERIFY=$DOCKER_TLS_VERIFY
        -e DOCKER_HOST=$DOCKER_HOST
        -e DOCKER_CERT_PATH=$DOCKER_CERT_PATH
        -e DOCKER_API_VERSION=$DOCKER_API_VERSION
EOF
      ;;
    t) # Run a raketask
      opt_count=$((opt_count + 1))
      RAKE='rake -f /mt/tasks/Rakefile'
      ;;
    T) # Display available Rake tasks
      opt_count=$((opt_count + 1))
      RAKE='rake -f /mt/tasks/Rakefile -T'
      ;;
    *)
      ;;
  esac
done

# get rid of options passed the to script and not passed onto the container
shift $opt_count

docker run -ti --rm \
  ${VOLUMES} \
  ${MINIKUBE_ENV} \
  ${DEBUG} \
  ${REGISTRY}${DOCKER_IMAGE} $RAKE $@
